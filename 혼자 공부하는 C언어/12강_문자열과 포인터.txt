
 12강.
 12-1 ~ 12-2.



 # 문자열과 포인터.

문자열.
printf( "%s" , "apple" ) 에서 "apple" 문자열은 사용될 때 시작 주소값으로 바뀐다.
"apple"이 문자 배열로 들어가고 문자열의 마지막을 알려주는 널문자를 추가한다.

문자열이 시작 주소값인지 확인하는 방법.
printf( "%c" ,  * "apple" ) 를 실행하면 시작 주소값에 들어있는 값인 a가 출력된다.
printf( "%c" , * ( "apple" + 3 ) ) 를 실행하면 시작 주소값에 들어있는 값 + 3으로 l이 출력된다.
printf( "%c" , "apple"[3] ) 를 실행하면 l이 출력된다. ( 문자열은 문자 배열이다 )

포인터를 사용한 문자열 사용.
char * cp = "apple" ;
while( * cp != '널문자' ) {
	printf( "%s" , cp ) ;
	cp ++ ;
}
apple , pple , ple, ... e 까지 반복하면서 출력한다.

gets( str )
"sweet apple" 처럼 공백을 포함한 문자를 입력받을 때 사용한다.
getchar( ) while 반복문으로 만들어져 있다.
\n문자가 버퍼에 남아있는 경우 아무것도 입력받지 못할 수 있다.

fgets( str, sizeof( str ), stdin ) 
문자열, 문자열의 크기, 버퍼를 매개변수로 입력받는다.
문자열의 크기만큼 입력받는다.
버퍼에 저장된 개행문자 \n까지 문자열에 입력된다.

strlen( str ) 
문자열에 들어있는 문자의 개수를 리턴한다.
str[ strlen( str - 1 ) ] 을 통해 fgets( )에 의해 들어간 \n문자를 널문자로 바꿔줄 수 있다.

puts( str ) 
str에 들어있는 문자열을 출력한다.
개행문자를 항상 실행하기 때문에 자동 줄바꿈을 한다.



 # 문자열 연산 함수.

문자열 연산.
"apple" + "pie" 는 시작 주소값의 더하기 연산이므로 불가능하다.

문자열 대입.
이미 초기화된 문자열에 새로운 값을 대입하려면 "새로운 문자열 널문자" 를 해줘야된다.
strcpy( 문자열 변수, "새로운 문자열" ) 함수를 이용한다.

#include.
#include <string.h> : 문자열과 관련된 함수를 include한다.

strcpy( 문자열 변수, "새로운 문자열" )
두 매개변수 모두 문자열 주소를 나타낸다.
첫번째 매개변수는 문자열 변수, 문자열을 가르키는 포인터를 사용할 수 있다.
두번째 매개변수로 문자열 변수, 문자열, 문자열을 가르키는 포인터 모두 사용가능하다.

strcpy( ) 함수 실행 원리.
strcpy( char * dp, char * sp )를 입력받는다.
while문을 통해 sp++, dp++ 하면서 sp에 있는 문자를 dp에 대입한다.
반복문이 종료되고 모든 문자를 대입한 후에 dp에 널문자를 입력한다.
모든 코드가 진행된 후에 dp 포인터를 리턴값으로 반환한다.

strncpy( 문자열 변수, "새로운 문자열", 복사할 개수 ) 
새로운 문자열에서 복사할 개수만큼만 문자열 변수에 대입한다.
마지막에 널문자를 붙이지 않아서 변수에 일부분을 바꿀 때 사용한다.

strcat( 문자열 변수, "새로운 문자열" ) 
문자열 변수에 저장된 널문자열을 확인해서 그 위치에서부터 새로운 문자열을 대입한다.
문자열 변수에 초기값이 있어야된다. ( 초기값이 없으면 널문자가 존재하지 않는다 )
마지막에 널문자를 붙여준다.

strcat( ) 함수 실행 원리.
strcat( char * dp, char * cp )를 입력받는다.
while문을 통해 dp가 널문자가 아닐경우 dp++ 해서 dp가 널문자인 위치를 찾는다.
새로운 while문으로 cp++, dp++ 하면서 sp에 있는 문자를 dp 널문자 위치부터 대입한다.
반복문이 종료되고 모든 문자를 대입한 후에 dp에 널문자를 입력한다.

strncat( 문자열 변수, "새로운 문자열", 복사할 개수 )
새로운 문자열에서 복사할 개수만큼만 문자열 변수에 널문자부터 대입한다.
마지막에 널문자를 붙인다.

strlen( 문자열 변수 )
문자열 변수에 들어있는 문자들에서 널문자가 나오기 전까지 개수를 반환한다.

strlen( ) 함수 실행 원리.
strlen( char * sp ) 을 입력받고, int cnt = 0를 선언한다.
while문을 통해 sp ++, cnt++ 하면서 sp가 널문자일때까지 반복한다.
return cnt로 널문자가 나오기 전까지 개수를 반환한다.

strcmp( 문자열 변수1, 문자열 변수2 ) 
문자열 변수1과 문자열 변수2의 문자의 문자의 아스키 코드값을 비교한다.
문자열 변수1[0] > 문자열 변수2[0] 와 같이 비교.
문자열 변수1가 크면 1을 반환, 문자열 변수2가 크면 -1을 반환.
문자열 변수1와 문자열 변수2가 완전히 똑같으면 0을 반환.

strcmp( ) 함수 실행 원리.
strcmp( char * sp1, char * sp2 ) 를 입력받는다.
while문을 통해 sp1++, sp2++ 하면서 sp1과 sp2가 같은지 확인하고, sp1이나 sp2가 널문자가 아닌지 확인.
sp1과 sp2가 같지 않으면 둘을 비교해서 sp1이 크면 1, sp2가 크면 -1을 반환.
sp1과 sp2가 모두 같으면 0은 반환.

strncmp( 문자열 변수1, 문자열 변수2, 비교할 개수 )
문자열 변수1과 2를 비교할 개수만큼 비교한다.

strcmp 사용시 주의사항.
비교하려는 문자열에 대소문자를 잘 확인해야된다.
사전에 나오는 순서를 비교하려면 두 문자열을 모두 대문자 또는 소문자로 바꿔서 비교해야된다.







