
 19강.
 19-1 ~ 19-2.



 # 전처리 지시자(1)

전처리.
컴파일러가 컴파일하기전에 미리 소스파일을 처리하는 것이다.
#을 사용하면 전처리 지시자이다.

컴파일 과정.
소스파일 -> 전처리 -> 전처리된 소스파일 -> 컴파일 -> 개체파일 -> 링크 -> 실행 파일.

#includ 지시자.
지정한 파일의 내용을 읽어 지시자 위치에 붙여 넣는다.
예 : #include<stdio.h> 또는 #include "student.h" 

#include 사용 방법.
#include<stdio.h> : 컴파일러가 설정한 include 디렉토리에서 파일을 찾는다. 
#include "student.h" : 소스파일이 저장된 디렉토리에서 찾고, 없으면 include 디렉토리에서 찾는다.
#include "C:\경로\파일이름" : 찾는 경로를 직접 지정할 수 있다.
h는 헤더파일을 의미하고, 헤더파일은 함수의 헤드 부분을 가지고 있는 파일이다.

#define 지시자.
복잡한 상수나 문장에 대해 매크로명을 정의한다.
예 : #define PI 3.14159 

#define을 사용한 매크로 함수.
#define SUM( a, b ) ((a) + (b))
실행속도가 빠른 장점이 있지만, 컴파일 오류가 발생할 수 있다. ( 연산은 컴파일에서 한다 )



 # 전처리 지시자(2)

이미 정의된 매크로.
정의가 약속되어 취소하거나 바꿀 수 없다.
_DATE_ : 컴파일을 시작한 날짜. ( String 타입 )
_TIME_ : 컴파일을 시작한 시간. ( String 타입 )
_FILE_ : 컴파일하는 파일명. ( String 타입 )
_FUNCTION_ : 매크로명이 사용된 함수 이름. ( String 타입 )
_LINE_ : 행 번호. ( 정수 타입 )

#line 지시자.
#line 100 "파일이름.c"
매크로명 _LINE_의 행 번호의 시작값 설정.
_FILE_이 치환되는 파일의 이름 설정.

매크로 연산자 #, ##.
# : 매크로 함수의 인수를 문자열로 치환한다.
## : 두 인수를 붙여서 치환한다.
예1 : #x " 문자열" = "x변수의값 문자열"
예2 : , x ## y = xy 

조건부 컴파일 지시자.
조건에 따라 소스코들르 선택적으로 컴파일한다.

#if ~ #elif ~ #else ~ #endif.
#if 조건식1
	실행할 문장 ;
#elif 조건식2
	실행할 문장 ;
#else 
	실행할 문장 ;
#endif

defined 또는 !defined 연산자.
defined 전처리 변수 이름 : #defined 전처리변수를 통해 정의되어 있다면 true, 아니면 false.
!defined 전처리 변수 이름 : 위와 반대.

#undef 지시자.
#undef 전처리변수이름.
매크로명의 정의를 취소한다.

#error 지시자.
메시지를 출력하고 컴파일을 중단한다.
컴파일러 버전이 6.0 이상이어야 된다.

#pragma 지시자.
#pragma pack( push, 1 ) , #pragma pack( pop ) 
컴파일러의 컴파일 방법을 제어한다.



 # 분할 컴파일.

분할 컴파일 방법.
여러 개의 파일로 작성하고 링크 단계에서 합친다.
각 파일에는 컴파일에 필요한 선언을 포함해야 한다.
이미 만들어진 소스 파일이나 개체 파일도 프로젝트에 포함할 수 있다.

extern.
다른 파일의 전역 변수를 쓸 때 extern 선언한다.
extern 타입 변수이름 ; ( 다른 소스 파일에서 선언 )

static.
static 타입 변수이름 ;
전역 변수에 static을 붙이면 현재 소스 파일에서만 사용할 수 있다.
외부에서 불필요한 데이터 접근을 차단할 수 있다.

헤더 파일의 필요성.
각 파일에 공통으로 필요한 코드를 모아 만든다. ( 함수 선언, 구조체 형 선언, extern 선언 )
헤더 파일의 수정 내용을 빠르고 정확하게 반영한다.
다른 프로그램에 헤더 파일의 내용을 재활용한다.

헤더 파일의 중복 포함 문제.
여러 개의 헤더 파일에 중복된 내용의 코드가 있으면 에러가 발생한다.
#ifndef ~ #define ~ #endif로 해결한다.




