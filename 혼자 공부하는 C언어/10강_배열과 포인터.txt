
 10강.
 10-1 ~ 10-2.



 # 배열과 포인터의 관계.

배열의 값.
int a[ 5 ] ; 배열 선언을 했을 때 변수 a는 배열의 시작주소.
a + 0 : a배열의 첫번째 인자의 주소.
a + 1 : a배열의 두번째 인자의 주소.
* ( a + 1 ) = 10 : a 배열의 두번째 값에 10을 대입.

배열의 주소값 원리.
배열주소값 + 정수를 하면 배열 + ( 정수 * sizeof( 배열의byte ) )로 자동 연산해준다.

배열 사용 주의사항.
* ( a + 5 ) = 10 와 같이 확보되지 않은 메모리 주소 공간을 사용하면 Exception이 발생할 수 있다.

포인터를 사용해서 배열을 다루기.
int a[ 5 ] ; 
int * pa = a ;
* pa = 10 : a배열의 첫번째 값에 10을 대입.
* ( pa + 1 ) = 20 : a배열의 두번째 값에 20을 대입. 
p[ 0 ] = 30 : a배열의 첫번째 값에 30을 대입. ( 배열과 똑같이 사용 가능 )

배열명과 포인터의 차이.
배열은 상수이고, 포인터는 변수이다.
배열은 상수이기 때문에 배열을 다시 선언하지 않으면 주소값이 변경되지 않는다.
포인터는 변수이기 때문에 값을 변경할 수 있다. ( p++ 등과 같은 연산도 가능 )
포인터에 배열의 첫번째 주소값이 아닌 n번째 주소값을 넣어서 사용할 수도 있다. 

포인터에 사용하는 연산자들.
* p : 포인터가 참조하고 있는 실제 값. ( 간접참조연산자 )
sizeof( p ) : 포인터의 메모리 공간 byte.
& p : 포인터의 주소값. ( 포인터를 포인터가 가르킬 때 사용 - 이중포인터 )
p ++ : 포인터가 참조하고 있는 주소 + ( 1 * sizeof( 참조타입 ) ) 

포인터 증감연산자 주의사항.
* ( p ++ ) : p[0]부터 p[n]까지 출력 - * 연산후에 ++함.
* ( ++ p ) : p[1]부터 p[n+1]까지 출력 - ++후에 * 연산.
( * p ) ++ : p[0]에 값을 출력하고 1을 더한다.
++ ( * p ) : p[0]에 값을 1을 더한후 출력.

포인터 연산 주의사항.
포인터 - 포인터는 가능 : 주소값 - 주소값 / sizeof( 타입 ) ;
> , >= , < , <=와 같은 관계연산자 사용가능.
포인터 * 정수 불가능, 포인터 / 정수 불가능.
포인터 + 포인터는 불가능하다.



 # 배열을 처리하는 함수.

배열을 처리하는 함수.
함수를 호출할 때 인자로 배열을 넘겨주고, 함수를 선언하는 매개변수에는 포인터를 선언한다.

배열의 size구하기.
int size = sizeof( 배열 ) / sizeof( 배열[0] ) ;

포인터 주의사항.
배열처럼 사용은 가능하지만, 배열의 size를 알 수 없다.







