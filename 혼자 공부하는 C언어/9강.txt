
 9강.
 9-1 ~ 9-2.



 # 포인터의 기본 개념.

주소.
byte단위로 존재한다.
0번부터 시작한다. ( 100, 101, 102, ... ) 

변수의 값.
l-value : 값을 저장하는 공간을 의미한다.
r-value : 공간에 존재하는 값을 의미한다.

시작주소.
2바이트 이상에서 첫번째 바이트를 의미.

시작주소 확인 연산자.
&변수이름 : 변수의 시작주소를 리턴. ( 시작주소 변수에 대한 정보가 있다 )
printf( "%d" , &변수 ) : 변수의 시작주소를 출력. ( %d, %u, %p 가능 )
그림으로 표현할때는 화살표로 표현한다.

간접참조 연산자.
*&변수이름 : 주소값을 통해 변수를 사용한다.
( *&a = 10 ) == ( a = 10 ) ;
( b = *&a + 20 ) == ( b = a + 20 ) 

포인터의 정의.
포인터 : 주소값을 저장하는 변수.
주소값의타입  * 변수이름 = & 참조할 변수이름 ;
* 연산자와 포인터를 선언할 때 * 는 전혀 다른 의미이다.
주소값은 4바이트로 처리가능하기 때문에 포인터 변수는 4바이트 메모리 공간을 갖는다.

포인터 사용.
* 포인터변수이름 을 통해 변수와 똑같이 값으로 사용할 수 있다.

포인터 사용예시.
int a = 10 ; int * p ;
p = &a ;
* p == a ;

포인터를 통해 실제 값에 입력하기.
scanf( "%d" , 포인터변수 ) ;
scanf( "%d" , &*포인터변수 ) ;

const 타입 * 포인터변수.
포인터변수에 주소값은 바꿀 수 있다.
포인터변수를 통해 참조된 값을 변경할 수 없다.

타입 * const 포인터변수.
포인터변수에 주소값을 바꿀 수 없다.
포인터변수를 통해 참조된 값을 변경할 수 있다.

const 타입 * const 포인터변수.
포인터변수에 주소값과 포인터변수를 통해 참조된 값을 변경할 수 없다.



 # 포인터에 관한 궁금한 이야기.

주소와 포인터의 차이.
주소 : 상수.
포인터 : 변수.
하나의 주소에 있는 값을 여러 포인터 변수를 통해 조작할 수 있다.

포인터의 메모리 공간.
참조하는 변수에 타입에 상관없이 항상 4바이트 공간을 차지한다.
sizeof( 포인터변수 )는 항상 4바이트이다.
sizeof( * 포인터변수 )는 참조하는 주소의 크기를 리턴한다.

포인터의 대입 규칙.
포인터를 선언할 때 타입을 참조할 타입과 맞춰야한다.
포인터는 초기화를 위해 null을 사용한다.

주소값으로 형변환.
( int * ) 100 : 100번지 주소를 의미하도록 형변환한다.

포인터가 필요한 이유.
전역변수를 호출한 함수내에서 값을 사용하기 위해 인자로 변수의 주소값을 보내고 함수에서 포인터로 받아서 사용.
포인터를 활용하는 방법은 이후에 더 배운다.





