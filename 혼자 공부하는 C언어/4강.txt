
 4강.
 4-1 ~ 4-2.



 # 산술, 관계, 논리 연산자.

용어.
오퍼레이터 : 연산자. ( + , - , ... )
오퍼랜드 : 연산에 필요한 수치나 연산으로 나타나는 수치를 통틀어 이르는 말. ( 10 + 20 가 있을 때 10, 20 )

산술연산자.
+ , - , * , / , % : 이항연산자.
++, -- : 단항연산자.

정수의 나눗셈.
int a = 5, b = 2일 때, a/b를 하면 2를 리턴한다.
정수를 나눗셈하면 정수값만 리턴하고 소수점을 버린다.

나머지 연산자.
실수에 %연산자를 사용하면 Exception이 발생한다.

증감연산자.
전위표기 prefix : ++a, --a.
후위표기 postfix : a++, a--.

증감연산자 전위표기, 후위표기.
다른연산자와 사용할 때 전위표기와 후위표기에 따라 값에 변화가 생긴다.
전위표기는 증감연산자 수행 후에 다른 연산을 수행한다.
후위표기는 증감연산자 수행 전에 다른 연산을 수행한다. 

대입연산자.
l-value left-value: 변수가 주소값으로 사용되는 경우. 
r-value right-value : 변수가 값으로 사용되는 경우. 

관계연산자.
> , >= , < , <= , == , != .
이항연산자이고 결과값으로 0은 거짓, 1은 참을 의미.

논리연산자.
&& : and , || : or , ! : not
and , or 는 이항연산자이고, not은 단항연산자이다.
short circuit rule : 이미 결정난 값에 대한 불필요한 연산을 하지 않는다.



 # 비트 연산자와 그 외의 멋진 연산자.

형변환 연산자.
자동형변환 promotion : 10 / 5. 을 하면 10을 자동으로 실수형으로 형변환해준다.
강제형변환 casting : "( type ) 변수이름" 을 통해 변수를 원하는 type으로 변형한다.

sizeof 연산자.
sizeof a : 변수 a가 몇 바이트인지 계산해서 리턴함.
sizeof는 연산순서 때문에 피연산자에 ( )를 붙여서 사용한다. ( 함수로 오해 X )
단항연산자이다. ( 이항연산자보다 먼저 연산된다 )

복합대입연산자.
a = a + 1을 a += 1와 같은 방식으로 사용한다.
+= , -= , *= , /= , %=, <<= , >>=, &=, |= , ... 등
복합대입연산자는 대입연산자와 우선순위가 같아서 모든 연산자가 끝난 후에 실행.

, 연산자.
여러개의 연산자를 실행할 때 사용한다.
예 : ++a , b = a + 10 ; 
대입연산자보다 우선순위가 낮은 유일한 연산자.
, 연산자는 제일 마지막 피연산자가 결과값이 된다.

삼항연산자.
( a > b ) ? a : b 
a > b가 1( true )이면 a를 리턴 a > b가 0( false )면 b를 리턴.
반환값이 있는 함수는 리턴값 자리에 넣을 수 있다.

비트 논리 연산자.
& : 논리곱. ( 1010 & 0101 = 0000 ) 
| : 논리합. ( 1010 | 0101 = 1111 )
^ : 비트가 같으면 0 다르면 1. ( 1010 ^ 1011 = 0001 )
~ : 비트 부정 연산자. ( ~1010 = 0101 )

비트 이동 연산자.
<< : 왼쪽 이동 연산자. ( a << 1 0000 1010 -> 0001 0100 : 왼쪽 끝은 0으로 채운다 ) 
>> : 오른쪽 이동 연산자 ( a >> 1 0000 1010 -> 0000 0101 : 오른쪽 끝은 부호에 따라 달라짐 )
<<는 shift 숫자만큼 2를 곱한 것, >>는 shift 숫자만큼 2로 나눈 것.

연산자 우선순위.
피연산자의 개수가 적을 수록 우선순위가 높다. ( 단항 > 이항 > 삼항 )
산술연산자 > shift 연산자 > 관계연산자 > 논리연산자.
우선순위가 어려울 땐 ( )를 통해 우선순위를 명확하게 지정해준다.





