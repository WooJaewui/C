
 18강.
 18-1 ~ 18-2.



 # 파일 개방과 입출력.

OS에 파일 시스템.
메모장으로 파일을 저장하면 파일 내용 이외에 저장 날짜, 저장 주소, 작성자 아이디 등을 저장한다.
HDD 연속된 공간에 파일을 저장하다가 연속된 공간이 부족하면 쪼개서 저장하기도 한다.
RAM에 파일을 적재하려면 FILE 구조체( 추가정보 )를 먼저 가져온다
FILE 구조체 정보를 통해 HDD에 실제 파일을 가져와서 RAM에 버퍼에 저장한다.

stream file.
FILE 구조체와 file을 임시저장하는 버퍼를 합쳐서 부르는 말.

fopen( "파일이름" , "개방모드" )
HDD에 있는 파일을 RAM에 적재한다.
함수를 실행하면 FILE 구조체 주소값을 반환한다.
파일이름을 가진 파일이 없으면 NULL을 반환한다.
포인터 변수를 통해 사용한다.
현재 작업디렉토리( 실행 파일 위치 )에서 파일이름을 찾는다.

개방모드.
r : 읽기 , w : 쓰기 , a : 추가하기.
rb : 바이너리모드 , rt : 메모장.

개방모드 w 주의사항.
파일이름이 없다면 파일이 생성된다.
같은이름의 파일이 존재하면 내용을 지운다.

fclose( fopen포인터 변수 )
파일을 모두 사용한 후에 stream file을 닫아준다.

파일 읽기.
FILE * fp = fopen( "파일이름" , "r" ) ;
char ch = fgetc( fp ) ;
fclose( fp ) ;
파일에 저장된 데이터를 반환해준다.
FILE 구조체에 위치지시자에 의해 파일의 내용을 순서대로 출력해준다.

EOF End Of File.
버퍼에 데이터가 존재하지 않을때 -1( EOF )을 반환한다.

파일 쓰기.
FILE * ofp = fopen( "파일이름" , "w" ) ;
fputc( "입력데이터" , ofp ) ;
fclose( ofp ) ;

기본 개방 스트림파일.
stdin : OS가 개방해놓은 키보드로 입력받을 수 있는 스트림파일. ( scanf )
stdout : OS가 개방해놓은 모니터로 출력할 수 있는 스트림파일. ( printf ) 
stderr : OS가 개방해놓은 모니터로 출력할 수 있는 스트림파일.

기본 개방 스트림파일 활용하기.
char ch ;
ch = fgetc( stdin ) ;
fputc( ch, stdout ) ;



 # 다양한 파일 입출력 함수.

다양한 형태로 입력받는 함수.
FILE * fp ;
char name[20] ;
int kor, eng, mat ;
fp = fopen( "a.txt" , "r" ) ;
fscanf( fp , "%s%d%d%d" , name, &kor , &eng, %mat ) ;
fclose( fp ) ;

fscanf( ) ;
FILE 버퍼 데이터를 주소값 변수로 입력받는다.

다양한 형태로 출력하는 함수.
File * ofp ;
char name[20] ;
int kor, eng, mat ;
ofp = fopen( "b.txt" , "r" ) ;
fprintf( ofp , "%s%d%d%d" , name, kor, eng, mat ) ;

fprintf( ) ;
FILE 버퍼 데이터를 모니터에 출력한다.

feof( 파일포인터 )
파일 데이터가 마지막이라서 -1( eof )를 반환한다면 true이다. ( eof가 아니면 false ) 

파일 한줄 입력받기.
fgets( 변수이름, 데이터크기 , 파일포인터 ) ;

바이너리 데이터 파일 입력.
fwrite( 주소값 , 데이터크기 , 입력개수 , 파일포인터 ) ;
바이너리 모드로 오픈해야 문제없이 입력된다. ( wb ) 

바이너리 데이터 파일 읽기.
fread( 주소값, 데이터크기, 읽을개수, 파일포인터 ) ;
바이너리 모드로 오픈해야 문제없이 읽어온다. ( rb )

바이너리 데이터 저장 단점.
실제 파일 메모장으로 열어봤을 때 데이터를 확인할 수 없다.

파일 입력.
fgetc( ) , fgets( ) , fread( ).

파일 출력.
fputc( ) , fputs( ), fwrite( ).

개방모드.
r+ : 읽기, 쓰기 가능.
w+ : 쓰기, 읽기 가능.
a+ : 추가쓰기, 읽기 가능.

rewind( 파일 포인터 ).
버퍼 지시자의 위치를 맨 처음으로 바꿔준다.

fseek( 파일 포인터 , offset , SEEK_SET ).
버퍼 지시자의 위치를 offset( 입력값 )에 따라 바꿔준다.
SEEK_SET : 첫 위치 기준으로 변경.
SEEK_CUR : 현재 위치 기준으로 변경.
SEEK_END : 마지막 위치 기준으로 변경.





