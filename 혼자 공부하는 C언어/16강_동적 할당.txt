
 동적 할당.
 16-1 ~ 16-2.



 # 동적 할당 함수.

동적 할당.
프로그램 실행시에 메모리 공간을 확보하는 방법이다.

malloc 함수.
# include <stdib.h>
타입 * p = ( 타입 * )malloc( sizeof( 타입 ) ) : 타입만큼 메모리 공간을 확보한다.
free( p ) : 동적할당 메모리 공간을 반납해준다.

메모리 영역.
코드영역 text.
데이터영역 data.
스택영역 stack : 변수가 저장되는 영역.
힙영역 heap : 동적 할당 함수 실행시 저장되는 영역.

동적 할당 특징.
연속된 메모리 공간이 없으면 공간을 확보하지 못할수도 있다.
동적 할당 메모리 공간 확보를 실패하면 null을 반환한다.

시스템 오류.
문제가 있으면 1을 반환하고, 정상적으로 실행되면 0을 반환한다.

calloc 함수.
# include <stdib.h>
calloc( 5, sizeof( 타입 ) ) : 타입 * 5만큼 메모리 공간을 확보한다.
타입 배열이 생성되는 것과 같고, 빈 공간을 0으로 초기화시켜준다.

realloc 함수.
# include <stdib.h>
realloc( 포인터변수, 개수 * sizeof( 타입 ) ) : 기존 동적할당 포인터 변수에 메모리 공간을 변경할 때 사용.
연속된 공간이 부족하면 메모리 주소가 변경될 수 있기 때문에 다시 포인터 변수에 담아줘야된다.



 # 동적 할당 저장 공간의 활용.

동적 할당과 배열.
int main( void ) {
	char temp[200] ;
	char * sp[3] ;
	int i;
	for( i=0; i<3; i++ ) {
		gets( temp );
		sp[i] = ( char * ) malloc( strlen( temp ) + 1 ) ;
		strcpy( sp[i] , temp ) ;
		free( sp[i] ) ;
	}
}

메모리 누수 memory leak.
동적 할당을 사용하고 free( )를 통해 메모리 반납을 하지 않았을 경우 발생하는 현상.

main 함수의 매개변수.
OS에게 입력받은 명령행 인수 사용.
void main( int argc, char ** argv ) ;
argc : 입력된 명령행의 개수.
argv : 명령행 인수의 주소를 저장하는 포인터 배열의 주소를 저장하는 2중 포인터.

명령행 인수.
CLI에서 값1 값2 값3 입력하면 동적할당으로 메모리 공간에 값1, 값2, 값3이 저장된다.
값1, 값2, 값3의 주소값을 포인터 배열에 저장한다.

main 명령행 출력하기.
int main( int argc, char ** argv ) {
	int i ; 
	for( i=0; i<argc ; i++ ) {
		printf( "%s\n" , argv[i] ) 
	}	
	
}





