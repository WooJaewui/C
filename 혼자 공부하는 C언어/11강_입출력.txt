
 11_입출력.
 11-1 ~ 11-2.



 # 아스키 코드값과 문자 입출력 함수.

아스키 코드.
0 ~ 127의 128개의 문자와 숫자가 매핑되어있다.
1byte로 표현하고 7비트만 있어도 모두 표현할 수 있다.
C언어에서 문자를 입력하면 아스키 코드값 숫자로 변형된다.
아스키 코드값 숫자는 int형으로 4byte 메모리 공간을 차지한다.

char 변수 원리.
ch = 'a'를 하면 'a'는 4byte지만 오버플로우로 인해 마지막 1byte만 입력되어 ch = 'a'( 97 )이된다.
ch++하면 ch = 'b'( 98 )가된다.

아스키 코드 특징.
대문자에 32를 더하면 소문자가 된다.
아스키 코드 값 32는 스페이스를 의미한다.

아스키 코드 입력.
char ch ;
scanf( "%c" , &ch ) : 'a'를 입력하면.
아스키 코드 값으로 ch = 97이 입력된다.

아스키 코드 출력.
char ch ;
scanf( "%c" , &ch ) ;
printf( "%c" , ch ) ;
아스키 코드 값 97을 문자로 변형하여 'a' 를 출력.

하나의 문자를 입력받는 함수.
getchar( ) : 매개변수가 없고,  int 타입의 아스키 코드 값를 반환한다.
scanf( )가 무거운 함수이기 때문에 하나의 문자를 입력할때는 getchar( )를 사용한다.
ctrl + z를 클릭했을 때 -1을 리턴하기 때문에 char가 아닌 int로 반환된다.

getchar( ) 예시.
int ch ;
ch = getchar( ) ;
printf( "%c", ch ) ;

하나의 문자를 출력하는 함수.
putchar( 문자변수 ) : 문자변수를 출력함.
printf( )가 무거운 함수이기 때문에 하나의 문자를 출력할때는 putchar( )를 사용한다.



 # 버퍼를 사용하는 입력 함수.

scanf( ).
키보드를 통해 입력을 받으면 버퍼에 저장된다.
scanf( )는 운영체제 버퍼에 의해 입력을 받는다.
버퍼에 더이상 저장된 데이터가 없어서 scanf( )가 입력을 받지 못했다면 0을 반환한다.
ctrl + z를 누르면 입력을 종료하고, -1을 반환한다.

scanf( )실행 예시.
scanf( )를 통해 tiger를 입력한다.
버퍼에 tiger와 개행문자 \n가 입력된다.
scanf( )을 반복해서 실행하면 버퍼에 저장된 t, i, g, ..., \n 순서대로 입력된다.

숫자를 입력받는 scanf( )와 버퍼.
scanf( )를 통해 10을 입력한다.
버퍼에 10과 개행문자 \n가 입력된다.
scanf( %d , &변수이름 )로 입력받으면 버퍼에 저장된 10\n을 확인해서 %d에 맞게 변환하여 10을 입력받는다.

숫자와 문자 버퍼 사용 주의사항.
숫자는 \n와 같은 개행문자를 무시한다.
문자는 \n와 같은 개행문자를 아스키 코드값으로 입력받는다.

개행문자 무시 방법.
scanf( " %c" , &ch )처럼 %c앞에 한 칸 스페이스를 넣어준다.

버퍼.
키보드를 입력받는 함수는 모두 버퍼를 사용한다. ( getchar( )함수도 버퍼를 사용 )

fflush( 버퍼이름 ) 
해당 버퍼의 모든 데이터를 지운다.
stdin 버퍼는 표준입력 버퍼이름이다. getchar( ), scanf( )입력 받는 버퍼. ( standard input )






