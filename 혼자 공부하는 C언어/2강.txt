
 2강.
 2-1 ~ 2-2



 # C프로그램의 기본 형태와 데이터 출력 방법.

C언어 특징.
함수로 구성되어있다.
하나의 함수로 프로그램을 만든 경우 함수의 이름은 main이여야 된다.

함수의 head 머리.
int main( void )
int : 함수의 반환형( 리턴 타입 ), main : 함수이름, void : 매개변수.

함수의 body 몸통.
{ 
	함수가 호출됐을 때 실행할 코드 ;
	return 0 ;
}
함수가 호출됐을 때 실행할 코드는 들여쓰기를 한다.
return : 함수를 끝내고 함수를 호출한 곳으로 제어를 돌려준다.
return 0은 정상적으로 프로그램이 종료, return 1은 오류 발생을 의미.

운영체제의 프로그램 실행 역할.
실행파일을 실행하면 메인메모리에 프로그램을 올린다.

스타트업 코드 startup code.
처음 프로그램을 시작하는 부분.
소스코드를 컴파일할 때 컴파일러가 운영체제에 맞게 스타트업 코드를 만든다.
스타트업 코드는 main( ) 메소드를 호출한다.

주석.
주석은 컴파일 되지 않고 소스코드에 메모를 남기는 역할을 한다.
// : 한줄 주석.
/* ~ */ : /* 부터 */ 까지 주석처리된다. ( 원하는 부분 주석 )

전처리기.
코드를 읽기 전에 먼저 처리해야되는 것들을 적는 부분.
#include <stdio.h> : stdio.h는 printf함수를 가지고 있다.

출력 함수.
printf( "Hello world" ) : 문자열을 화면에 출력한다.
printf를 사용하기 위해서는 전처리기를 통해 include 해야된다.

제어문자.
printf( )는 줄바꿈이 포함되지 않기 때문에 줄바꿈을 하기 위해서는 printf( "\n" )을 해줘야된다.
\n : 개행문자.
\r : 현재 커서를 맨 오른쪽으로 옮긴다.
\b : 현재 커서를 오른쪽으로 옮긴다.
\t : 현재 커서를 다음 탭 위치로 옮긴다. ( tap은 8칸씩 끊어져 있다 )
\a : 삑 소리를 내준다. 

printf( ) 변환 문자.
%d : 정수 ( decimal )
%lf : 실수 ( long float )
%.1lf : 소수점 1까지 실수 ( 반올림 )



 # 상수와 데이터 표현 방법.

상수.
프로그램 안에서 변하지 않는 수.

정수.
0~9, +, -를 사용해서 표현하는 수. ( 10, -5, 20, ... )
C에서는 8진법, 10진법, 16진법 등으로 표현 가능.
8진법 : 0~7, 10진법 : 0~9, 16진법 : 0 ~ 9 - a ~ f.
8진법은 숫자 앞에 0을 붙여서 구분해준다.
16진법은 숫자 앞에 0x를 붙여서 구분해준다.

실수.
0~9, +, -, . 을 사용해서 표현하는 수. ( +10.5, -.7, 20.5, 30. , ... )
소수 방식 : 소수점을 찍어서 사용하는 방식.
지수 방식 : 0.0105e-2과 같이 표현하는 방식.
정규화 방식 : 지수방식 중에 1.05e-2와 같이 일의 자리에 0이 아닌 수를 넣는 방식.

문자와 문자열.
문자 : 'A' 와 같이 '작은 따옴표'를 붙인다. ( 제어문자는 하나의 문자이다 - \n 등 )
문자열 : "apple" 와 같이 "큰 따옴표"를 붙인다.

정수의 번역.
정수는 2진수 4byte( 32bit )로 번역이 된다.
ex ) 10 -> 0000 0000 0000 1010
MSB Most Significant bit : 가장 큰 bit ( 가장 왼쪽에 있는 비트 - 부호를 나타낸다, 1이면 음수 )
LSB Least Significant bit : 가장 작은 bit ( 가장 오른쪽에 있는 비트 )

보수 관계.
1의 보수 : 0을 1로, 1을 0으로 바꾸는 것.
2의 보수 : 1의 보수에 + 1을 한 것. ( 음수를 양수로, 양수를 음수로 표현할 때 사용 )

2의 보수 원리.
a와 a의 2의 보수 -a를 더하면 항상 0이 나온다. ( 2의 보수로 음, 양수를 표현하는 이유 )

음수의 숫자를 구하는 방법.
MSB가 1인 경우 2의 보수를 구해서 앞에 -를 붙이면 값을 구할 수 있다.

정수의 특징.
정수는 ( 2**32 ) -1까지 표현 가능하다.
정수가 ( 2**32 ) -1을 넘는 수를 표현하면 자동으로 자릿수가 4byte가 추가된다. ( 8byte )
숫자 뒤에 LL을 붙이면 항상 8byte로 계산한다.

IEEE754.
single 포맷, double 포맷, quat 포맷.

실수.
부호, 정규화해서 지수를 확인, 유효 숫자 확인.
부호 MSB에 0 또는 1을 넣는다.
정규화해서 지수 확인 : e+2, e+4, ... 에서 2, 4를 뽑아내고 +1023을 더한다. ( 음수도 양수화 하기 위해 )
유효 숫자 : 무의미한 0와 표현할 수 있는 숫자까지 정리한 숫자.
실수는 앱실론 오차가 있다. ( 유효 숫자가 제한되어 있기 때문에 )

문자.
문자는 4byte로 표현. 
'A' = 65 = 0000 0000 0000 0000 0000 0000 0100 0001
C에서는 ASCII값과 똑같은 정수값으로 표현.
C++에서는 1byte로 표현.

문자열.
문자열은 1byte로 표현.
"A" = 65 = 0100 0001 0000 0000 ( 1byte와 문자열의 끝을 의미하는 null 문자 ) 





