
 13강.
 13-1 ~ 13-2.



 # 변수 사용 영역.

지역변수.
( auto ) 타입 변수명 으로 선언한다. ( auto는 생략가능 )
선언한 { } 스코프 내부에서만 사용할 수 있다.
지역변수를 선언한 스코프가 끝나면 자동으로 메모리 공간에서 사라진다.
자동 초기화가 되지 않기 때문에 초기화 하지 않으면 쓰레기 값이 들어간다.
{ } 안에 { } 가 있을 때 같은 변수이름으로 변수를 선언할 수 있다.

전역변수.
함수 밖에서 선언한 변수.
전역변수는 자동으로 0으로 초기화된다.
전역변수와 스코프 내에 지역변수가 같은 이름으로 선언되면 지역변수가 사용된다.
프로그램이 시작될 때 메모리에 저장되고 프로그램이 끝날 때 사라진다.

전역변수의 단점.
코드 수정이 힘들다.
전역변수에 오류가 있을 때 디버깅이 힘들다.

정적 지역 변수.
static 타입 변수명으로 선언한다.
함수 안에서만 사용 가능한 전역변수.
정적 지역변수는 자동으로 0으로 초기화된다.
프로그램이 시작될 때 메모리에 저장되고 프로그램이 끝날 때 사라진다.
함수가 호출되어도 다시 선언되지 않는다.

레지스터 변수.
register 타입 변수명으로 선언한다.
지역변수와 특징은 같지만 데이터가 메모리가 아닌 register에 저장된다.
컴파일러가 최적화해서 꼭 register에 저장되지 않을 수 있다.
register 변수는 주소 연산자( & )를 사용할 수 없다.



 # 함수의 데이터 공유 방법.

매개변수.
함수를 선언할 때 함수 호출 시 어떠한 값을 입력받는지 선언한다.
함수를 호출할 때 매개변수 타입의 값을 입력해서 함수를 사용한다.
매개변수 생성되는 것으로 메모리에 새로운 공간을 차지한다.

주소값 매개변수.
함수( &a )와 같이 주소값을 입력받으면 매개변수는 포인터를 사용해야된다.

매개변수 형태.
call by value : 매개변수로 값을 입력받는 경우.
call by reference : 매개변수로 참조변수를 입력받는 경우. ( C에서는 call by value만 있다 )

주소값을 반환하기.
함수의 리턴타입에 타입 * 와 같이 표현해야된다.
예 : int * sum ( int a, int b ) { 실행할 코드 ; } 

주소값 반환 주의사항.
지역변수에 주소값을 반환하면 { }가 끝나면 메모리 공간이 사라져서 사용하지 못할 수 있다.
사라지지 않는 주소값을 반환해야 문제없이 사용할 수 있다.







