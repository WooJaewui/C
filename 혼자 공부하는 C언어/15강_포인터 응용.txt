
 포인터 응용.
 15-1 ~ 15-2.



 # 2중 포인터, 배열 포인터.

타입을 확인하는 방법.
선언부분에서 변수이름을 빼면 타입이 된다.
int * p 의 타입은 int * , int a[5] 의 타입은 int[5] 

2중 포인터 선언.
int a ; 
int * p = & a ;
int * * pp = & p ;

2중 포인터 변수 사용.
* * pp = 10 ; ( a에 10을 대입한다 )
* p = 10 ; ( a에 10을 대입한다 )

매개변수 활용.
외부 변수의 값을 변경할 때 매개변수에 주소값을 보내줘야된다. 
포인터를 함수 호출할 때 입력값으로 넘겨주면 매개변수로 이중포인터를 사용해야된다.

문자 배열 포인터 초기화.
char * sp[5] = { "dog", "cat", ... } ;

배열명이 갖는 2가지 의미.
1. 배열의 첫번째 요소의 시작주소. ( 주소 상수 )
2. 배열 전체의 저장공간을 나타내는 논리적 변수. ( & a == a 가 같다 )

논리적 변수의 활용.
int a[5] 일 때, &a == a 는 모두 시작주소로 같다.
& a 는 논리적 변수로 활용되어 & a + 1을 하면 a가 끝난 후에 주소값인 120이 나온다.
& a 는 배열 전체의 시작주소라고 부른다.

배열 포인터.
& a와 같이 배열 전체의 시작주소를 저장하는 포인터를 의미한다.

배열 포인터 선언하기.
int a[5] ;
int ( * p )[5] = & a ;
( * P )를 붙이지 않으면 포인터 배열이 생성된다.

배열 포인터 사용하기.
( * P )[0] = 10 ; ( 배열 첫번째 위치에 10을 대입 )
p + 1 = 120 ; ( int[5] 타입의 시작주소 + 1 값을 의미 - 확보하지 않은 저장공간으로 사용 X )
2차원 배열이상에서 함수 내부에서 배열을 활용하기 위해 매개변수로 사용한다.

2차원 배열에서 배열 포인터 사용하기.
int a[4][5] ;
a의 시작주소가 100일 때, a + 1 => 120이다.
* ( a + 1 ) + 2 = 주소값 128. ==> a[1][2] = 주소값 128.
매개변수로 배열 포인터 int ( * ap )[5] 로 받아서 사용할 수 있다.



 # 함수 포인터와 void 포인터.

함수이름.
함수이름은 함수의 시작주소를 담고 있다.

함수 포인터 선언, 초기화.
int ( * fp )( int, int ) = 함수이름 ;
함수의 타입은 리턴타입 ( 매개변수1, 매개변수2, ... ) 이다.

함수 포인터 사용하기.
int ( * fp )( int, int ) = 함수이름 ;
( * fp )( a, b ) 또는 fp( a, b ) 

void 포인터 선언.
void * vp = & a ; 

void 포인터 사용하기.
( int * ) vp , ( char * ) vp 와 같이 형변환을 하고 사용해야 된다.
다양한 자료형을 다뤄야하는 포인터에 사용한다.





