
 구조체.
 17-1 ~ 17-2.



 # 구조체.

구조체 형 선언.
struct 구조체이름 { int i ; double b ; ... } ;
모든 영역에서 사용하기 위해 보통 함수 밖에서 선언한다.

구조체 사용하기.
int main( void ) {
	struct 구조체이름 a ;
	a.i = 10 ;
	a.b = 10.5 ;
}

우선순위 0순위 연산자.
" . " , "->" , "( )" , "[ ]" ( 4가지 )

바이트 얼라인먼트 byte alignment.
기준 byte를 설정하여 메모리 공간을 사용하는 방식이다.
구조체에서 가장 크기가 큰 byte를 기준으로 설정하는 경우가 많다.
너무 많은 공간이 padding byte가 생기는 문제가 발생할 수 있다.
변수 선언 순서에 따라 padding byte가 바뀐다.

구조체 응용.
구조체 멤버로 포인터, 배열 사용 가능.
구조체 안에 구조체 생성 가능.

strcopy( a , "b" ) ;
문자 배열( a )에 문자열( "b" )을 대입할 때 사용한다.

이중 구조체 초기화.
a구조체 안에 a'가 존재할 때,
struct student a = { { "abc" , 17 , 182.5 } , 315, 3.5 } ;

구조체 변수의 대입 연산.
struct student a, b ;
a = b ;
같은 타입의 구조체끼리는 대입연산이 가능하다.
함수에 매개변수로 포인터를 넣지 않고 두 개이상의 변수를 사용할 때 구조체 대입을 사용한다.

비트 필드 구조체 선언.
struct bit_field {
	unsigned int son : 2 ; ( 2비트 메모리 공간 차지 )
	unsigned int daughter : 2 ; ( 2비트 메모리 공간 차지 )
	unsigned int pet : 3 ; ( 3비트 메모리 공간 차지 )
}

비트 필드 구조체 특징.
int 4byte 32비트를 2, 2, 3 비트만큼 공간만큼 나눠서 저장한다.
32비트를 넘어가면 다시 32비트 메모리 공간을 사용한다.
signed도 사용할 수 있지만, 보통 unsigned를 사용한다.
변수 이름을 생략하면 padding bit가 된다.
변수 이름을 생략하고 0비트를 할당하면 남은 공간을 모두 padding bit로 사용한다.

비트 필드 구조체 주의사항.
비트 멤버를 사용하기 때문에 주소값을 사용할 수 없다. ( 주소값은 byte 단위 )
입력받아서 사용하려면 주소값을 사용할 수 있는 다른 변수를 이용해야된다.



 # 구조체 활용, 공용체, 열거형.

구조체 포인터 활용.
struct 구조체이름 { 멤버1; 멤버2; ... }
int main( void ) {
	struct 구조체이름 a ;
	struct 구조체이름 * ap = & a ;
	( * ap ).멤버1 = 값 ;
	ap -> 멤버2 = 값 ; 
	...
}

구조체 배열 활용.
struct 구조체이름 { 멤버1; 멤버2; ... } 
int main( void ) { 
	struct 구조체이름 a[5] = { 
		{ 값1, 값2, ... }
		{ 값3, 값4, ... }
		... 
	}
	printf( "%d" , a[0].멤버1 ) ;
}

자기 참조 구조체.
멤버로 본인 구조체 타입의 변수를 가지고 있는 구조체.
struct list { int num ; struct list * next ; } 
struct list a = { 10 } , b = { 20 }, c = { 30 } ;
a.next -> next -> num == 30 ;
struct list * tp= & a ;
while( tp != null ) { 
	printf( "%"d , tp -> num ) ;
	tp = tp -> next ;
}

LinkedList.
LinkedList가 자기 참조 구조체로 되어있다.
node와 head를 통해 주소값을 활용해서 다음 구조체를 사용할 수 있다.

공용체.
union 공용체이름 { 멤버1; 멤버2; ... } 
int main( void ) { 
	union 공용체이름 a = { .멤버2 = 값2 } ;
}

공용체 특징.
메모리 공간을 모든 멤버가 공유해서 사용한다.
메모리 공간을 가장 많이 차지하는 멤버의 크기만큼만 메모리 공간을 사용한다.
여러개의 멤버를 동시에 대입해서 사용할 수 없다.

열거형 enum.
enum 열거형이름 { 값1, 값2, ... } ;
int main( void ) { 
	enum 열거형이름 a ;
	a = spring ;
}

열거형 특징.
열거형에 데이터를 입력해놓으면 컴파일러가 정수형으로 바꿔서 저장한다.
정수값을 의미있는 이름으로 저장해서 가독성을 높일 때 사용한다.

typedef
변수의 이름을 타입으로 사용할 수 있다.
typedef int * INT ;
INT a, b ;

typedef 활용 - 구조체.
typedef struct ( 구조체명 ) { 멤버1; 멤버2; ... } 타입명 ;
구조체명을 생략할 수 있다.

typedef 활용 - 자기참조 구조체.
typedef struct 구조체명 타입명 ; 
struct 구조체명 { 타입명1 ; 멤버 ; ... } ;





